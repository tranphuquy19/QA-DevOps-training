{
	"info": {
		"_postman_id": "c9cd3deb-3f02-4535-9c10-7caa97bd8559",
		"name": "qa-serverless-testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8217057"
	},
	"item": [
		{
			"name": "get-todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Message is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Response time is in an acceptable range\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{API_GATEWAY_URL}}/todo",
					"host": [
						"{{API_GATEWAY_URL}}"
					],
					"path": [
						"todo"
					]
				}
			},
			"response": []
		},
		{
			"name": "post-todos",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.message).to.exist;",
							"  pm.expect(responseData.body).to.exist;",
							"  pm.expect(responseData.reqHeaders).to.exist;",
							"  pm.expect(responseData.reqIp).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Name field in the body is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"",
							"  pm.expect(responseData.body).to.be.an('object');",
							"  pm.expect(responseData.body.name).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Request headers are not empty\", function () {",
							"    const reqHeaders = pm.response.json().reqHeaders;",
							"    ",
							"    pm.expect(reqHeaders).to.be.an('object');",
							"    ",
							"    for (const key in reqHeaders) {",
							"        pm.expect(reqHeaders[key]).to.have.lengthOf.at.least(1, key + \" should not be empty\");",
							"    }",
							"});",
							"",
							"",
							"pm.test(\"Request IP is in a valid format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.reqIp).to.match(/^\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}$/, \"Request IP should be in a valid format\");",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"hello todo list\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{API_GATEWAY_URL}}/todo",
					"host": [
						"{{API_GATEWAY_URL}}"
					],
					"path": [
						"todo"
					]
				}
			},
			"response": []
		}
	]
}