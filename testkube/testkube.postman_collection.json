{
	"info": {
		"_postman_id": "c9cd3deb-3f02-4535-9c10-7caa97bd8559",
		"name": "testkube",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "8217057"
	},
	"item": [
		{
			"name": "entries",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - fact, length\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.fact).to.exist;",
							"    pm.expect(responseData.length).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Fact is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.fact).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Fact should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Length is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.length).to.be.a('number');",
							"    pm.expect(responseData.length).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response body is a JSON object\", function () {",
							"    pm.expect(pm.response.json()).to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'fact' field is a string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.fact).to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'length' field is an integer\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.length).to.be.a('number');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'length' field is greater than or equal to 0\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.length).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is within an acceptable range\", function () {",
							"  pm.expect(pm.response.responseTime).to.be.below(200);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.publicapis.org/entries",
					"protocol": "https",
					"host": [
						"api",
						"publicapis",
						"org"
					],
					"path": [
						"entries"
					]
				}
			},
			"response": []
		},
		{
			"name": "catfact",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"  pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Response has the required fields - fact, length\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.fact).to.exist;",
							"    pm.expect(responseData.length).to.exist;",
							"});",
							"",
							"",
							"pm.test(\"Fact is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.fact).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Fact should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Length is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.length).to.be.a('number');",
							"    pm.expect(responseData.length).to.be.at.least(0);",
							"});",
							"",
							"",
							"pm.test(\"Response time is less than 500ms\", function () {",
							"    pm.expect(pm.response.responseTime).to.be.below(500);",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://catfact.ninja/fact",
					"protocol": "https",
					"host": [
						"catfact",
						"ninja"
					],
					"path": [
						"fact"
					]
				}
			},
			"response": []
		},
		{
			"name": "coindesk",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"",
							"pm.test(\"Validate the time object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.time).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.time.updated).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.time.updatedISO).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.time.updateduk).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the disclaimer field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.disclaimer).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the chartName field is empty\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.chartName).to.be.empty;",
							"});",
							"",
							"",
							"pm.test(\"Validate bpi object\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.bpi).to.exist.and.to.be.an('object');",
							"});",
							"",
							"",
							"pm.test(\"Verify that the 'time' object has all the required fields\", function() {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.time).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.time.updated).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.time.updatedISO).to.exist.and.to.be.a('string');",
							"    pm.expect(responseData.time.updateduk).to.exist.and.to.be.a('string');",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the 'updated' field in the 'time' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.time).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.time.updated).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\+\\d{2}:\\d{2}$/);",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the 'updatedISO' field in the 'time' object\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.time).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.time.updatedISO).to.exist.and.to.match(/^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(\\.\\d{3})?Z$/, \"Value should be in ISO 8601 format\");",
							"});",
							"",
							"",
							"pm.test(\"Validate the format of the 'updateduk' field\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.time).to.exist.and.to.be.an('object');",
							"    pm.expect(responseData.time.updateduk).to.match(/\\d{2}-\\d{2}-\\d{4} \\d{2}:\\d{2}:\\d{2}/, \"Format should be dd-mm-yyyy hh:mm:ss\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that disclaimer field is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.disclaimer).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.coindesk.com/v1/bpi/currentprice.json",
					"protocol": "https",
					"host": [
						"api",
						"coindesk",
						"com"
					],
					"path": [
						"v1",
						"bpi",
						"currentprice.json"
					]
				}
			},
			"response": []
		},
		{
			"name": "randome",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"",
							"pm.test(\"Response status code is 200\", function () {",
							"    pm.expect(pm.response.code).to.equal(200);",
							"});",
							"",
							"",
							"pm.test(\"Gender is either 'male' or 'female'\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.gender).to.be.oneOf(['male', 'female']);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Gender is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData).to.be.an('object');",
							"    pm.expect(responseData.results[0].gender).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Email is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Title is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.name.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"First name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(user) {",
							"        pm.expect(user.name.first).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Last name is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Results array should not be empty\");",
							"  ",
							"  responseData.results.forEach(function(result) {",
							"    pm.expect(result.name.last).to.exist.and.to.be.a('string').and.to.have.lengthOf.at.least(1, \"Last name should not be empty\");",
							"  });",
							"});",
							"",
							"",
							"pm.test(\"Street number is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    responseData.results.forEach(function (result) {",
							"        pm.expect(result.location.street.number).to.be.a('number').and.to.be.at.least(0);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Street name is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Results should not be empty\");",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.location.street.name).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Street name should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"City is a non-empty string\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData.results[0].location.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"State is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1);",
							"    responseData.results.forEach(function(user){",
							"        pm.expect(user.location.state).to.be.a('string').and.to.have.lengthOf.at.least(1, \"State should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Street number is a non-negative integer\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.location.street.number).to.be.a('number').and.to.be.at.least(0, \"Street number should be non-negative\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"City is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results[0].location.city).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the response has the required fields\", function () {",
							"  const responseData = pm.response.json();",
							"  ",
							"  pm.expect(responseData).to.be.an('object');",
							"  ",
							"  const requiredFields = [",
							"    'gender',",
							"    'name',",
							"    'location',",
							"    'email',",
							"    'login',",
							"    'dob',",
							"    'registered',",
							"    'phone',",
							"    'cell',",
							"    'id',",
							"    'picture',",
							"    'nat'",
							"  ];",
							"  ",
							"  requiredFields.forEach(function(field) {",
							"    pm.expect(responseData).to.have.property(field);",
							"  });",
							"});",
							"",
							"pm.test(\"The gender field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.gender).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Email field is in a valid email format\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array');",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.email).to.match(/^[\\w-]+(\\.[\\w-]+)*@([\\w-]+\\.)+[a-zA-Z]{2,7}$/);",
							"    });",
							"});",
							"",
							"",
							"pm.test(\"Verify that the title field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results[0].name.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Value should not be empty\");",
							"});",
							"",
							"",
							"pm.test(\"Verify that the first name field is a non-empty string\", function () {",
							"    const responseData = pm.response.json();",
							"    ",
							"    pm.expect(responseData.results).to.be.an('array').and.to.have.lengthOf.at.least(1, \"Results array should not be empty\");",
							"    responseData.results.forEach(function(result) {",
							"        pm.expect(result.name.first).to.be.a('string').and.to.have.lengthOf.at.least(1, \"First name should not be empty\");",
							"    });",
							"});",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://randomuser.me/api/",
					"protocol": "https",
					"host": [
						"randomuser",
						"me"
					],
					"path": [
						"api",
						""
					]
				}
			},
			"response": []
		}
	]
}